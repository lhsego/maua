% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/saUtil.R
\name{saUtil}
\alias{plot.saUtilCall}
\alias{plot.saUtilFun}
\alias{print.saUtilCall}
\alias{print.saUtilFun}
\alias{saUtil}
\title{Generates or evaluates a single attribute utility function}
\usage{
saUtil(saUtilFun = "exp", z = NULL, ...)

\method{print}{saUtilCall}(x, ...)

\method{print}{saUtilFun}(x, ...)

\method{plot}{saUtilFun}(x, ...)

\method{plot}{saUtilCall}(x, ...)
}
\arguments{
\item{saUtilFun}{A character string indicating the single attribute
utility function.  This is passed to \code{\link{saUtilFunctions}}.  It can be of the form \code{"saUtil_name"}
or simply \code{"name"}. Acceptable values of \code{saUtilFun} can be found by calling \code{saUtilFunctions()}.}

\item{z}{A numeric vector of attribute values, or NULL.}

\item{x}{a \code{saUtilCall} or \code{saUtilFun} object returned by \code{saUtil}}

\item{\dots}{Optional named arguments to the \code{\link{saUtilFunctions}} function that will set the parameters
for the single attribute utility function.  For the \code{print} and \code{plot} methods, these can be additional
arguments to \code{\link{print.default}} or \code{\link{plot.default}}.}
}
\value{
\item{1}{If \code{z = NULL}, the single attribute utility function with fixed parameters is returned
and can be called later. This function has a single argument, \code{z}, which are the measured
values of the attribute of interest. The returned object is of class \code{saUtilFun}.}
\item{2}{If a numeric vector is provided for the argument \code{z},
the utility function is evaluated using \code{z} using the parameters supplied to \code{saUtil} via \code{...} and the
calculated utility values are returned. The returned object is of class \code{saUtilCall}.}
}
\description{
Creates an object of class \code{saUtilFun}, a single attribute utility function that can be called later, or an
object of class \code{saUtilCall}, which contains the evaluation of the single attribute utility function for
attribute data, \code{z}.
}
\section{Methods (by generic)}{
\itemize{
\item \code{print}: Prints an \code{saUtilCall} object by displaying only the values returned by the single
attribute utility function, and it hides the attributes of the object.

\item \code{print}: Prints an summary of a \code{saUtilFun} object.

\item \code{plot}: For a \code{saUtilFun} object, plots the single attribute utility function.

\item \code{plot}: For a \code{saUtilCall} object, plots the single attribute utility function,
overlaying the data on the plot
}}
\examples{
# Create a decreasing, exponential single attribture utility function
uf <- saUtil("exp", zrange = c(2, 14), urange = c(1, 0), certEquiv = 5)
is.function(uf)
print(uf)

# Info about 'uf' is contained in the attributes
attributes(uf)

# Plotting without specific data values
plot(uf)

# Now calculate the utility for a sequence of points
u <- uf(seq(2, 14, length = 10))
print(u)
plot(u)

# If we send actual data (attribute values) into saUtil(), the utility function
# is calculated for us
calculatedUtil <- saUtil("saUtil_log", z = runif(10), shift = -0.01, zrange = c(1/10, 1))
print(calculatedUtil)
plot(calculatedUtil)

# An example where the range of attribute values is defined by the existing data
calculatedUtil <- saUtil("log", z = runif(10), shift = -0.01)
plot(calculatedUtil, col = "Blue", pch = 2, cex = 1.5)
}

